Question :-
***** Return two prime numbers *****

Given an even number (greater than 2), return two prime numbers whose sum will be equal to given number. There are several combinations 
possible. Print only first such pair. 

NOTE: A solution will always exist, read Goldbach’s conjecture. Also, solve the problem in linear time complexity, i.e., O(n).

Input:
The first line contains T, the number of test cases. The following T lines consist of a number each, for which we'll find two prime numbers.

Note: The number would always be an even number.

Output:
For every test case print two prime numbers space separated, such that the smaller number appears first. 
Answer for each test case must be in a new line.

Constraints:
1 ≤ T ≤ 70
1 ≤ N ≤ 10000

Example:
Input:
5
74
1024
66 
8
9990

Output:
3 71
3 1021
5 61
3 5
17 9973

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

Solution:-


import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		//code
		GFG ob=new GFG();
		Scanner sc= new Scanner(System.in);
		int t = sc.nextInt();
		for(int i=1;i<=t;i++)
		{
		    int n = sc.nextInt();
		    for(int s=2;s<n;s++)
		    {
		        for(int e=n-1;e>=s;e--)
		        {
		            if((s+e)==n)
		            {
		                if(ob.prime(s)&&ob.prime(e))
		                {
		                    if(s<e){
		                    System.out.println(s+" "+e);
		                    s=n;break;}
		                    else{
		                    System.out.println(e+" "+s);
		                    s=n;break;}
		                }
		            }
		            
		        }
		    }
		    
		}
	}
	boolean prime(int n)
	{
	    boolean flag=true;
	    
	       for(int j=2;j<n;j++)
	       {
	           if(n%j==0){
	           flag=false;break;
	           }
	       }
	return flag;
	    
	}
	
}
